// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var C, c, checker, checkers, crypto, g, generate, k, v, _fn, _ref;

  crypto = require('crypto');

  checkers = require('keybase-bjson-core').checkers;

  C = require('./const');

  exports.generate = generate = function(cfg, source) {
    var l;
    l = cfg.byte_length;
    source || (source = crypto.prng(l - 1));
    return Buffer.concat([source, new Buffer(cfg.lsb, 'hex')]);
  };

  exports.match = function(id, cfg) {
    return (id.length === cfg.byte_length * 2) && (id.slice(id.length - 2) === parseInt(cfg.lsb, 16));
  };

  exports.checker = checker = function(cfg) {
    var bufcheck, lsbcheck;
    bufcheck = checkers.buffer(cfg.byte_length, cfg.byte_length);
    lsbcheck = function(x) {
      var err, lsb_got;
      lsb_got = x.slice(-1).toString('hex');
      return err = lsb_got === cfg.lsb ? null : new Error("Bad LSB, wanted " + cfg.lsb + " but got " + lsb_got);
    };
    return function(x) {
      return bufcheck(x) || lsbcheck(x);
    };
  };

  exports.checkers = c = {};

  exports.generators = g = {};

  _ref = C.id;
  _fn = function(type, cfg) {
    c[type] = checker(cfg);
    return g[type] = function(s) {
      return generate(cfg, s);
    };
  };
  for (k in _ref) {
    v = _ref[k];
    _fn(k, v);
  }

}).call(this);
